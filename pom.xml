<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>3.2.4</version> <!-- 硬编码，不可用属性 -->
        <relativePath/>
    </parent>

    <groupId>org.ls</groupId>
    <artifactId>department-management</artifactId>
    <version>0.0.1-SNAPSHOT</version>
    <name>department-management</name>
    <description>部门工时管理系统 (Department Timesheet Management System)</description>

    <properties>
        <java.version>21</java.version>
        <mybatis-spring-boot.version>3.0.4</mybatis-spring-boot.version>
    </properties>

    <dependencies>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>

        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-validation</artifactId>
        </dependency>

        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-thymeleaf</artifactId>
        </dependency>

        <dependency>
            <groupId>org.mybatis.spring.boot</groupId>
            <artifactId>mybatis-spring-boot-starter</artifactId>
            <version>${mybatis-spring-boot.version}</version>
        </dependency>

        <dependency>
            <groupId>org.postgresql</groupId>
            <artifactId>postgresql</artifactId>
            <scope>runtime</scope>
        </dependency>

        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
            <optional>true</optional>
        </dependency>

        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <scope>test</scope>
        </dependency>

        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-devtools</artifactId>
            <scope>runtime</scope>
            <optional>true</optional>
        </dependency>
    </dependencies>

    <build>
        <plugins>
            <!--可以把依赖的包都打包到生成的Jar包中-->
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
                <executions>
                    <execution>
                        <goals>
                            <goal>repackage</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
            <!--使用docker-maven-plugin插件-->
<!--            <plugin>-->
<!--                <groupId>com.spotify</groupId>-->
<!--                <artifactId>dockerfile-maven-plugin</artifactId>-->
<!--                &lt;!&ndash; 推荐使用稳定最新版本 &ndash;&gt;-->
<!--                <version>1.4.10</version>-->
<!--                &lt;!&ndash;将插件绑定在某个phase执行&ndash;&gt;-->
<!--                <executions>-->
<!--                    <execution>-->
<!--                        <id>build-image</id>-->
<!--                        &lt;!&ndash;将插件绑定在package这个phase上。也就是说，用户只需执行mvn package ，就会自动执行mvn docker:build&ndash;&gt;-->
<!--                        <phase>package</phase>-->
<!--&lt;!&ndash;                        <phase>install</phase>&ndash;&gt;-->
<!--                        <goals>-->
<!--                            <goal>build</goal>-->
<!--                        </goals>-->
<!--                    </execution>-->
<!--                </executions>-->

<!--                <configuration>-->
<!--                    &lt;!&ndash; 由于docker服务器在内网，因此禁止拉取远程镜像，所需要的镜像已经手工在内网docker服务器上传 &ndash;&gt;-->
<!--                    <pullNewerImage>false</pullNewerImage>-->
<!--                    &lt;!&ndash; 镜像仓库名（可包含 registry 前缀） &ndash;&gt;-->
<!--                    <repository>${project.artifactId}</repository>-->
<!--                    &lt;!&ndash; 标签，建议用版本号或 latest &ndash;&gt;-->
<!--                    <tag>${project.version}</tag>-->
<!--                    &lt;!&ndash; 指向现有的 Dockerfile 路径 &ndash;&gt;-->
<!--                    <dockerfile>${project.basedir}/Dockerfile</dockerfile>-->
<!--                    &lt;!&ndash; 构建上下文目录，通常是项目根 &ndash;&gt;-->
<!--                    <contextDirectory>${project.basedir}</contextDirectory>-->
<!--                    <buildArgs>-->
<!--                        <JAR_FILE>target/${project.build.finalName}.jar</JAR_FILE>-->
<!--                    </buildArgs>-->
<!--                </configuration>-->
<!--            </plugin>-->
        </plugins>
    </build>
</project>